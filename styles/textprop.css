/* The text align property is used to set the horizontal alignment of  text within an element, this doesn't mean aligning the element itself on the page but the text within the alignment. And since h1 elements are their own block, meaning they take up all the space
within an area then the text should be in the center of the screen since the element takes up a block. In this case since I'm using a h1 element and there should ever only be one h1 element on a page, the styling below would only be changeing one section of the page
due to the one h1 element. If this was used on something like h2 elements or paragraphs etc. Then all of the h2 or paragraph elements would have this styling applied. By default the text alignment is set to left. text-aling does not move the enire h1 element(s) around
or any other element it's used inside of. It just moves the text within the element itself.

Below will align the text in all paragraphs to the right of the paragraph element, and since paragraphs are another block element this means that they use all the space horizontally across the page, it means the text will be on the furthest right side of the 
page it can get. 
   text-align: right; */
h1 {
  text-align: center;
  /* The "font-wight" property gives the text it's boldness, there's different ways to do this, you can set it via key words for example: normal, bold, lighter, bolder etc. There is another way to do this though, with numbers from 100 to 900, depending on the font
  used, it might not have all these options available to it, for example one font might only be able to go up 600 and if you specify it to use 900 then the font will only go as high as it can which would be the 600 and it would stay there. Most commonly used values
  are 400 and 700, or normal and bold. Most h1 elements by default are bolded (700). */
  font-weight: normal;
  /* With the "text-decoration" property, it may sound simple at first but there's a lot you can do with this property. I'll give a few examples later in this comment. For now I need to mention that this property sets the appearance of decorative lines on text.
  There are other properties similar to this but they're limited to the things they're specific for, this is like all of them grouped together, the other limited properties are; "text-decoration-line", "text-decoration-color", "text-decoration-style"
  and "text-decoration-thickness", they're pretty self explanatory.
  
  With the live example below, the decoration is set to "underline" meaning it will give the text in the element and underline. If I was to use "overline" instead of underline it would set a line over the top of the text, kind of common sense realy, and then there's
  line-through which is basically stikethrough text. Since this property is basically a bunch of text decorations put together, this means we can specific not only the text decoration itself but also the colour, style etc. Look at the live example for instance we have
  changed the colour to be orange. I can also change the thickness of the line by adding a percentage, for example 15% looks nice and bold compared to the default which sits at or around %5 (or you  can us pixels "px"). In the Live example I've also changed the style to be wavy instead of a
  solid straight line (which is default), there's a bunch of other styles I can use and honestly I'm not going to list them, MDN is your biggest friend when it comes to this stuff in my opinion.
  A cool use of "text-decoration" is to remove the underline from hyperlinks or "a" elements */
  text-decoration: orange wavy underline;
  /* Okay so the "font-size" property, it well changes the font size. But the more complicated thing about this is that there's a whole bunch of different units/measurements to do this with, some relative and some absolute. The most common one being "px" which is pixels
  however, it's not the actual size of a pixel on the display and the size can differ from monitor to monitor. They're not recommended for responsive websites, there are better units to be used. But for now we'll use them until we understand the other ones. Here's a
  glimpse at some others:
    Relative; em, rem, vh, vw, %, and more.
    Absolute; px, pt, cm, in, mm.  */
  font-size: 50px;
}

p {
  /* The "line-height" property is used to change the spacing between lines of text within an element. There's different units we can use to change this however, we haven't gotten into the different units yet. So for now we can just use a number, for example "1" being
  default and nomral spacing between the lines, and 2 being double the spacing. This controls the height of the line and not the text itself, just the line the text is on. */
  line-height: 2;
  /* The "letter-spacing" property is similar to line height, instead of it being the spacing of the line it's the spacing between the letters or characters of text. Again we can use a bunch of different units for this but for now we'll just what we are told for now. */
  letter-spacing: 1px;
  /* "font-family" property is able to change the font of the text, there are "browser safe" fonts which are bullt into the browser already. But this doesn't meant that everyone of these fonts are going to be on every machines browser. We can use custom fonts later on
  but we haven't gotten to that part yet. The most basic and simplest way of doing this is to just specify one font as shown below:
    font-family: Century Gothic;
  but the better approach to this would be to use a font stack, shown in the live exmaple below, the first position is the main font that will be used if the browser supports and has it. If not then it will look to the next font and try using that, and you can have a
  bunch of fonts in the stack to make it so that if you're being specific then almost every browser will have the formatting you want. You can use a specific font for example "Century Gothic" or a font family "sans-serif" font families have a few or a bunch of fonts
  within them. Using the live example below, I'm using Geneva as my main font, but it's currently only available to 2.08% of Windows machines, so using Century Gothic as my second font I can see that it's using Century Gothic as when I only had Geneva, my font did
  not change. Arial would be used in the case of the browser not having both Geneva or Century Gothic, these are the generic names of each font. And with the last little bit (sans-serif) if my browser didn't have either Geneva, Century Gothic or Arial then it would
  use the sans-serif font family which is a collection of fonts and it would use the first one from there that works/the browser has. Generic names = One font. Family Name = Collection of fonts. It's always best to supply a fall back font or family of fonts. */
  font-family: Geneva, Century Gothic, Arial, sans-serif;
}
