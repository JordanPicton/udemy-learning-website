/* The main way I've been styling with CSS has been with the element selector. For example if I wanted to style all h2 elements then I would do something like below:
h2 {
   text-align: center;
}

As you can see I've selected the h2 elements. There are a lot more stuff I can do with selectors and there's different ones, the main one I've been using has been the element selector up until now.
There are a bunch of selectors and they are as follows; Element Selector, Class Selector, ID Selector, Descendant Selector, Adjacent Selector, Direct Descendant Selector, Attribute Selector, Pseudo Elements and Pseudo Classes.

Basic CSS rule:
selector {
   property: value;
}


Selector List, this is actually really cool. So lets say you're wanting all your h2 and all your h3 elements to have the same styling, well there's an easy way to do this, above shows you the way to do it to only one element. Well Selector lists can do it to multiple.
Think of it as multiple element selectors but in one place. The only thing is that when you edit this selector list it styles all the elements you have within the list. You can have more than 2 elements within a selector list. The way to do this is shown below;
h2, h3, h4 {
   color: red;
   text-align: center;
}
This would give all h2, h3 and h4 elements the text colour of red and they will all be aligned to the center of each respective element. Commas are used to combine selectors into a selector list.
*/

/* Universal Selector, rarely used will edit everything on the page. Using the example below, all the text colour in every element would be white. Selects everything in the document, it seems like you can use it to make all the text the colour of white like shown
below, this isn't the only thing it's doing in this case though. On larger documents this can be pretty in-efficient (there are better ways to do things that use this selector), it would also be applying this to every possible element on the page, even things that
you can't make black like the img element, it's an image you can't just make it black like this. You could probably make an image black and white using some fancy CSS but this isn't the way to do it. This can also include things like all the divs, containers
that don't contain text, it would still be trying to apply this property to those.
* {
   color: white;
}

After testing this out myself, it seems to also change the colour of some other properties for example the hr element can have colour applied to it and this has also changed to white. If the background property wasn't used it and lets say it was used on the
element only, then this would only change the background of the body and not the elements within the body. For example a button inside the body would not have the same background it would stay default. I just tested to make sure I was correct and I was.
* {
  color: white;
  background-color: black;
}*/

body {
  background-color: #10002b;
  color: white;
}

button {
  font-size: 15px;
  background-color: #c77dff;
}

/* Element Selector, these select everything of a given type/element. All of X element type and then apply those properties to that. There's an example below and there'll be a live example too.
Make all <h1> elements purple.
h1 {
   color: purple;
} 
Live example of an element selector: */

h1,
h2 {
  color: purple;
  text-decoration: underline;
}

/* Referring back to when I did the forms in HTML, with inputs we would put in "id"'s this was so we could link the input with a label. Well this also helps with CSS too since you can select an element based on it's id. id attributes can be used on any element to
provide a hook for CSS, this is to single out a single element from a group of elements. Generally ids should not have spaces, short as possible but still making them standout and readable. As you can see below, there is a "#" symbol infront of the id name,
this is telling the CSS file that this is an id and not an element. (We're looking for an element with this specific id.) The example below gives the button the same dark colour as the body and gives the text a lighter colour than the other buttons. This works
and will only work on the element with the id="signupb". Only one thing on each page should have different ids, meaning there should not be two or more of the same ids within the same page. They're supposed to be used as unique identifiers.

#idname {
  property1: value;
  property2: value;
  etc. etc.
}
It's tempting to use id attributes a lot and then using them for CSS purposes but there are other selectors that can be used, you want to try keeping them to a minimum, but don't avoid using them just try not spamming them but still use them. */
#signupb {
  background-color: #240046;
  color: #7b2cbf;
}

/* Class selectors, which are as commonly used along side the element selectors, are selectors that are a similar approach to the id selectors. You can add a class attribute to an element, and just like id selectors we can hook into that class using CSS. The
difference with these is that they can be added to multiple elements hence the name of the selector and the attribute used "Class" it's creating a class of unique and specific elements. Classes = Groups. Most of the time these are used since websites usually
follow a theme or a similar style so these "should" be used more commonly which makes sense honestly. Repeated patterns are usually grouped together for class selectors to style them. It's kind of selecting a bunch of things at once and making them the same 
entity and then making them look similar. 

Within the HTML document, I've given a bunch of span elements class ids that have the same value. There are other span elements which do not have class attributes however. The code below gives ALL span elements the text colour of "#956db8" but I will change it so
that the span elements with the class attribute and the same value for the class attribute to not have this change and to havbe a background colour instead. A class does not have to consist of only one element, it can be a bunch of unique elements grouped together.
.classname {
  property1: value;
  property2: value;
  etc. etc.
}
*/
span {
  color: #956db8;
}

.label {
  color: #6e172d;
  background-color: #4cc9f0;
  font-size: 70%;
}

/* Descendant Selectors, they look very similar to multiple element selectors the difference being that they don't use a comma to separate the elements. For example, if I want to look for "a" element within an "li" element then I can use this to look for those
specific elements. The way I would do this is shown below. The live example below makes all the "a" elements to have a crimson font colour but only if they're nested within a "span" element. To show this off a little more I'll make it so the other "a" elements have a 
different colour than below. I'll make them a horrible looking green in this case. I could also use classes to accomplish this but why would I if I know what elements I'm trying to select? It's good for when there's elements nested inside other elements and I want 
only those ones changing. Along with it just seems a little better to do this over classes and ids again but only if I know I can do it to the elements I want. It's also good for all elements nested that are the same element I want changing, since classes can change 
more than one element. A good idea for this is if I have repeating content on a page, for example a "section" element with content inside. I can give those "section" elements a class and have something like below.

.news span a {
  color: white;
}
This would be a really good use case, and the reason I say this is because if I did something like
section span a {
  color: white;
}
then every "a" element within a "span" element nested inside a "section" would be styled this way. Whereas if I put it inside a class and then use descendant I have more control.
*/
span a {
  color: crimson;
}

/* Where the example below look for any "a" element within the footer element and changes it's colour to orange. Even though the "a" elements are nested within a nav, ul and li elements they still get this styling since they're still within the footer element, 
even though they're 4 levels down they're still descendants of the footer. So instead of giving all the elements classes, if there's a pattern I want to style then it's good to make a section element around the thing I want to style and then just use descendant 
selectors where I can. These are better than ids at most either way. (Any "a" element nested anywhere in a footer.) */
footer a {
  color: orange;
}

/* This is for the example above and it works, showcasing that above has a different style than the entire collective of "a" elements. */
a {
  color: chartreuse;
  text-decoration: none;
}

/* ----------------------------------------------------------------------------------------------------- */
/* These next few selectors aren't as common as the ones just learnt but they're still worth mentioning. */
/* ----------------------------------------------------------------------------------------------------- */

/* Adjacement combinator, these are selectors that are right after another. For example if I wanted to have a "p" element but I only wanted the "p" element after another element, for example right after a "h1" element, then I can use the adjacent selector. They have to
immediately follow the "h1" element however, otherwise this wouldn't work. So it would have to look like the following:
<h1>Hello</h1>
<p>This is a test</p>
In this case it would select the "p" element direcetly after the "h1" element. It can't be like the below option because it would not work.
<h1>Hello</h1>
<h2>I am more text</h2>
<p>This is a test</p>
This would not work due to the "p" element not being the next element immediately after the "h1" element which we would be looking for.
Also these are elements that come after the other, not to be confused with being nested inside each other. (This was good to be pointed out honestly). On the same level, adjacent.

A live example of this is shown below. It should only change the login button, which it did. It should give the button a lime border colour. (It did.) 
I'm honestly not sure what a use case for this would be. */
input + button {
  border-color: lime;
}

/* The Direct Child/Descendant combinator works in a similar way to above, this time it has to be the immediate child of the first element listed. A live example is shown below to how this works. But instead of using the "+" symbol we use the ">" greater than symbol.
The only "a" element that should get changed in this case would be the "a" links direcetly under the footer, they're nested inside the footer only. Not anoy other elements just the footer, so the footer is the main and only parent of the "a" element. 
(Any "a" element that is a direct child of footer.) */
footer > a {
  color: hotpink;
}

/* !!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!! */
/* Something to note about the Attribute selectors below, they work with any Attrubute within an elements tags, they don't only work with the ones shown, these are just examples to show how they can work. */

/* The Attribute selector, this will select all the elements of element X with the attribute of Y. For example;
(elementX)[(attributeY)] {

}
input[type="text"] {
  width: 300px;
  color: yellow;
}
In the live example below it will only select "input" elements with the type of password. It will not style other input types, for example it would leave type of text alone. It needs to follow the rule of square brackets [], attribute type, equals =, and then the value
in this case it was password.
element[attribute="value"] */
input[type="password"] {
  background-color: black;
  color: white;
}

/* Below is just a test to demonstrate it a little more.
Attribute Selector
section[class="post"] {
  background-color: aquamarine;
}

This is the same as doing;
Class Selector
.post {
  background-color: aliceblue;
}

A better way to do this however, is as follows;
section.post {
  background-color: aliceblue;
}
This would select only section elements with the post class. Kind of useful in the sense of; if you have multiple elements within the "post" class for example and you just want to edit something a little more with the section elements and not the other elements 
of post. There are a few more quirks with the attribute selector however.
For example the one used above, it's looking for an exact version of what we typed. "section[class="post"]" It has to look exactly like "class="post"". But lets say we have multiple classes with the word post inside and we want to edit them all. Then we can have a fuzzy
way of doing this. This link explains it a little better. https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors. But I'm going to explain their examples for myself.

<a> elements with a title attribute. This would be looking for all "a" elements with a title attribute, disregarding the value of the title attribute.
a[title] {
  color: purple;
}

<a> elements with an href matching "https://example.org". This is looking for the exact match of an "a" element that has the value of "https://example.org".
a[href="https://example.org"]
{
  color: green;
}

<a> elements with an href containing "Example". This is looking for "a" elements that have the string "Example" inside of the attribute value, doesn't have to be exact, the word Example could be anywhere within the attribute value.
So for example it could look something like: <a href="www.HelloThereIAmAnExample">Hi</a>
a[href*="Example"] {
  font-size: 2em;
}

A live example of this is shown below. This only changes one "a" element to have the text colour magenta. They have to be case sensitive but there are ways to make it more complex and not require case sensitivity.
These are most commonly used for input elements either way. */
a[href*="google"] {
  color: magenta;
}

/* Pseudo Classes, I have used these before on the most common method, however I didn't realise it was called a Pseudo class. These are mainly modifiers and used by adding keywords to the end of a selector with a colon, there needs to be a colon to indicate we want to
add a pseudo rule to the selector we're using. For example we can use these to check for checkboxes that have been checked, elements that are being hovered over or things like every X amount of something then do something, every 5th button change it's border to be
rounded for example. They're modifiers, something we add on. 
Below is a live example of this which I have used before but never knew it was called this, in all fairness I used to just copy and paste and never actually understood what it was I was doing. So what the below example is doing is, basically when the user is hovering
over an "a" element the color of the text will turn yellow along with giving it an underline.
States of an element we can style. */
a:hover {
  color: yellow;
  text-decoration: underline;
}

/* We could do something similar for buttons, look below. The example will make the background colour a darker purple, give the border a groove style (just looks slightly cleaner to me) along with a magenta looking border colour and text colour of white, this
happens when a user hovers over a button however. Also something to note, on line 150 there is an example of an adjacent combinator, and you'll notice when using this code that the button for this (which is the sign up button) doesn't get the styling from below,
we will learn more about this later but something else to mention is that on mine the only thing that changes for this button is the border because I dodn't specify one with the adjacent combinator. */
button:hover {
  background-color: #7b2cbf;
  border-style: groove;
  border-color: #f000cc;
  color: white;
}

/* We could also do something like this:
.post button:hover {
  background-color: #7b2cbf;
  border-style: groove;
  border-color: #f000cc;
  color: white;
}
And then only buttons within the post class will be getting this style. 
Another live example of this is shown below. The first button active applies to all buttons and then one is a class specific active psuedo class. 
So for the first example, when the button is pressed this means it is "activated/active" and the following css selectors give them the styling.

First one gives buttons a background colour of dark purple, border style of groove, border colour of a light blue, and finally red text. This is applied to all buttons and is only visible when the button is pressed. 
Second one gives buttons within a post class, the background colour of a dark green, along with border style of groove, border colour of a light green and finally a text colour of yellow. And again these are only visiable when the button is clicked.*/
button:active {
  background-color: #2a0649;
  border-style: groove;
  border-color: #3f33e9;
  color: rgb(255, 0, 0);
}

.post button:active {
  background-color: #064d18;
  border-style: groove;
  border-color: #55d871;
  color: rgb(238, 255, 0);
}

/* And finally for the last example of this for every second post class, we will change the background colour along with the text colour. However before that, seeing the example below in the comment. This will only pick the 3rd post class and stop there.
If the 3 was a 5 instead then it would only pick the 5th post class. But there is a way to make it pick every 2nd or 3rd post class etc.
.post:nth-of-type(3) {
  background-color: #1b004b;
} 
Uisng the live example below we can see it's 2n meaning every other post class gets this styling. Think of it as 2next. As in it's looking for the 2nd of this class and then the next 2nd of this class. */
.post:nth-of-type(2n) {
  background-color: #150038;
}

/* Pseudo Elements are slightly similar to what we learned just above but this time instead of doing the whole elements with the selector these allow us to style a particular part of the selected elements. They're also similar in the sense that we add these to our
selectors like modifiers, however this time we use two colons instead of the one but it seems like most browsers allow you to just use the one colon. A way we can use these are as follows, instead of changing the entire text of a paragraph element we can select the
first letter or the first line of that paragraph and style it differently from the rest of the paragraph. There's not as many modifiers for these Pseudo Elements as there is for Psuedo Classes. There's a decent list on MDN, however almost half of them are for testing
only and shouldn't be used on production/live websites. A good use for this is actually having the first letter of lets say a paragraph for example having a bigger font size for something like an article perhaps. A live example of this is shown below.
Things or parts of an element we're selecting. */
h3::first-letter {
  color: magenta;
  font-weight: 700;
  font-size: 130%;
}
/* As you can see above, we're selecting the first letter of a h3 element and styling the it to have the colour of magenta, a higher font weight (makes it more bold) and giving it a 30% font size increase. 
Another live example below shows that when a user selects/highlights something to copy it, we can change the way it looks for them. */
h3::selection {
  background-color: aqua;
  color: #10038a;
}
/* With the example above, we can see that when a user is highlighting a h3 element the background colour is an aqua whilst the colour of the font is a nice deep blue, instead of the normal blue background with white text. This does only work with h3 elements 
with this example though. To have this style apply to the entire document we would do something like this:
::selection {
  background-color: aqua;
  color: #10038a;
} */

/* The Cascade, really useful knowledge for CSS. Basically the order in which the styles are declared matters in and are linked to matter. Starting from the top going down, top having the least priority. This also works with using multiple style sheets too, if you have
one style sheet loaded before another and it has a h1 that is red in style sheet 1 and then style sheet 2 changes h1 elements to purple. Stylesheet 2 would have a higher priortiy over this style.
For example:
h1 {
  color: red;
}
h1 {
  color: purple;
}
In this example purple would win. What happens is h1 elements get set to the colour red first and then they run into the conflicting style so they recolour the element to the next colour, in this case purple.

Specificity, this seems a little confusing honestly. But apparently it's what happens when there is different selectors in use instead of the same ones. It's how the browser chooses which rule to apply to what element when there are mutple rule that could be applied
to said element. Depending on how specific the selector is the one with more detail/speifics wins. I don't really know how to explain this in my own words but I can always come back to this part of the course and see what it means in the future. 
I suppose the example below could help a little. 
p {
  color: yellow;
  text-size: 10px;
}

section p {
  color: teal;
  border-color: pink;
}
In this case the selector that is "section p" is more specific because it's saying a "p" element within a "section" element and not just the "p" element by itself. So in that case the styling for the section p elements would be used over the normal p element style.
Selector Priority Score Sheet:
ID 100
Class 10
Element 1
This as the above score sheet to resemble priority, in the sense of ID's are really specific and they count for 100 points each and as for Classes they count for 10 and then Elements count for 1. 
There are tools that can be used to help understanding this. Here is one of them. https://specificity.keegan.st 
This only applies when there is a conflict, you can have the same example as above with the element selectors again. And lets say the p element had a colour of "#10038a" this is technically more specific along with all p elements still
getting the text size of 10px but also the section p elements getting a border colour. This is because they do not conflict with each other. The only thing that conflicts within this example is the color properties. And now we know the scoring
system of this we now understand why the signup button doesn't get the hover colour applied, it's because ID's are a lot more specific than anything other selector. 
You can have 50 element selectors within one selection and they still wouldn't be higher than a single class selector. */
